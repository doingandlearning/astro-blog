---
import type { BookWithEnhancedData } from "../types/books";

export interface Props {
	books: BookWithEnhancedData[];
}

const { books } = Astro.props;

// Helper function to generate calendar data
function generateCalendarData(books: BookWithEnhancedData[]) {
	const currentYear = new Date().getFullYear();
	const startDate = new Date(currentYear, 0, 1);
	const endDate = new Date(currentYear, 11, 31);
	
	// Create a map of dates to book counts
	const dateMap: Record<string, number> = {};
	
	books.forEach(book => {
		const finishedDate = new Date(book.dateFinished);
		if (finishedDate.getFullYear() === currentYear) {
			const dateKey = finishedDate.toISOString().split('T')[0];
			dateMap[dateKey] = (dateMap[dateKey] || 0) + 1;
		}
	});
	
	// Generate calendar grid
	const weeks: Array<Array<{date: Date, count: number, dateKey: string}>> = [];
	let currentWeek: Array<{date: Date, count: number, dateKey: string}> = [];
	
	// Start from the first Sunday of the year (or before if needed)
	const firstDay = new Date(startDate);
	firstDay.setDate(firstDay.getDate() - firstDay.getDay());
	
	let currentDate = new Date(firstDay);
	
	while (currentDate <= endDate || currentWeek.length > 0) {
		if (currentWeek.length === 7) {
			weeks.push(currentWeek);
			currentWeek = [];
		}
		
		const dateKey = currentDate.toISOString().split('T')[0];
		const count = dateMap[dateKey] || 0;
		
		currentWeek.push({
			date: new Date(currentDate),
			count,
			dateKey
		});
		
		currentDate.setDate(currentDate.getDate() + 1);
		
		// Stop if we've passed the end of the year and completed the week
		if (currentDate > endDate && currentWeek.length === 7) {
			weeks.push(currentWeek);
			break;
		}
	}
	
	return { weeks, dateMap };
}

const { weeks, dateMap } = generateCalendarData(books);
const maxCount = Math.max(...Object.values(dateMap), 1);
const totalBooksThisYear = Object.values(dateMap).reduce((sum, count) => sum + count, 0);

// Helper function to get intensity class
function getIntensityClass(count: number): string {
	if (count === 0) return 'intensity-0';
	const intensity = Math.ceil((count / maxCount) * 4);
	return `intensity-${Math.min(intensity, 4)}`;
}

// Helper function to format date for tooltip
function formatDateForTooltip(date: Date): string {
	return date.toLocaleDateString('en-US', { 
		weekday: 'long', 
		year: 'numeric', 
		month: 'long', 
		day: 'numeric' 
	});
}

// Get month labels
function getMonthLabels() {
	const months = [];
	for (let i = 0; i < 12; i++) {
		const date = new Date(new Date().getFullYear(), i, 1);
		months.push(date.toLocaleDateString('en-US', { month: 'short' }));
	}
	return months;
}

const monthLabels = getMonthLabels();
const dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
---

<div class="reading-heatmap">
	<div class="heatmap-header">
		<h3 class="heatmap-title">ðŸ“… Reading Activity Calendar</h3>
		<div class="heatmap-stats">
			<span class="stat-item">
				<strong>{totalBooksThisYear}</strong> books this year
			</span>
			<span class="stat-item">
				<strong>{maxCount}</strong> max books per day
			</span>
		</div>
	</div>

	<div class="calendar-container">
		<!-- Month labels -->
		<div class="month-labels">
			{monthLabels.map(month => (
				<div class="month-label">{month}</div>
			))}
		</div>

		<!-- Calendar grid -->
		<div class="calendar-grid">
			<!-- Day labels -->
			<div class="day-labels">
				{dayLabels.map((day, index) => (
					<div class={`day-label ${index % 2 === 1 ? 'hidden' : ''}`}>
						{index % 2 === 1 ? '' : day}
					</div>
				))}
			</div>

			<!-- Weeks grid -->
			<div class="weeks-grid">
				{weeks.map(week => (
					<div class="week-column">
						{week.map(({ date, count, dateKey }) => (
							<div 
								class={`day-cell ${getIntensityClass(count)}`}
								data-date={dateKey}
								data-count={count}
								title={`${formatDateForTooltip(date)}: ${count} book${count !== 1 ? 's' : ''}`}
							>
								<div class="day-tooltip">
									<div class="tooltip-date">{formatDateForTooltip(date)}</div>
									<div class="tooltip-count">
										{count === 0 ? 'No books finished' : `${count} book${count !== 1 ? 's' : ''} finished`}
									</div>
								</div>
							</div>
						))}
					</div>
				))}
			</div>
		</div>

		<!-- Legend -->
		<div class="heatmap-legend">
			<span class="legend-label">Less</span>
			<div class="legend-scale">
				<div class="legend-cell intensity-0"></div>
				<div class="legend-cell intensity-1"></div>
				<div class="legend-cell intensity-2"></div>
				<div class="legend-cell intensity-3"></div>
				<div class="legend-cell intensity-4"></div>
			</div>
			<span class="legend-label">More</span>
		</div>
	</div>
</div>

<style>
	.reading-heatmap {
		@apply bg-white rounded-lg border border-gray-200 p-6;
	}

	.heatmap-header {
		@apply flex justify-between items-center mb-6;
	}

	.heatmap-title {
		@apply text-lg font-semibold text-gray-800;
	}

	.heatmap-stats {
		@apply flex gap-4 text-sm text-gray-600;
	}

	.stat-item strong {
		@apply text-gray-900 font-semibold;
	}

	.calendar-container {
		@apply space-y-3;
	}

	.month-labels {
		@apply grid grid-cols-12 gap-1 text-xs text-gray-500 ml-12;
	}

	.month-label {
		@apply text-center;
	}

	.calendar-grid {
		@apply flex gap-1;
	}

	.day-labels {
		@apply flex flex-col gap-1 text-xs text-gray-500 w-11;
	}

	.day-label {
		@apply h-3 flex items-center;
	}

	.day-label.hidden {
		@apply invisible;
	}

	.weeks-grid {
		@apply flex gap-1 flex-1;
	}

	.week-column {
		@apply flex flex-col gap-1;
	}

	.day-cell {
		@apply w-3 h-3 rounded-sm cursor-pointer relative transition-all duration-200;
		border: 1px solid #e5e7eb;
	}

	.day-cell:hover {
		@apply border-gray-400;
		transform: scale(1.2);
		z-index: 10;
	}

	/* Intensity colors */
	.intensity-0 {
		@apply bg-gray-100;
	}

	.intensity-1 {
		@apply bg-green-200;
	}

	.intensity-2 {
		@apply bg-green-400;
	}

	.intensity-3 {
		@apply bg-green-600;
	}

	.intensity-4 {
		@apply bg-green-800;
	}

	/* Tooltip */
	.day-tooltip {
		@apply absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 pointer-events-none transition-opacity duration-200 z-20;
		white-space: nowrap;
	}

	.day-cell:hover .day-tooltip {
		@apply opacity-100;
	}

	.tooltip-date {
		@apply font-semibold;
	}

	.tooltip-count {
		@apply text-gray-300;
	}

	/* Legend */
	.heatmap-legend {
		@apply flex items-center justify-end gap-2 text-xs text-gray-500 mt-4;
	}

	.legend-scale {
		@apply flex gap-1;
	}

	.legend-cell {
		@apply w-3 h-3 rounded-sm border border-gray-300;
	}

	.legend-label {
		@apply text-xs text-gray-500;
	}

	/* Responsive design */
	@media (max-width: 768px) {
		.heatmap-header {
			@apply flex-col items-start gap-2;
		}

		.heatmap-stats {
			@apply flex-wrap;
		}

		.day-cell {
			@apply w-2 h-2;
		}

		.legend-cell {
			@apply w-2 h-2;
		}

		.day-labels {
			@apply w-8;
		}
	}

	/* Animation for calendar appearance */
	.week-column {
		animation: slideIn 0.6s ease-out;
		animation-fill-mode: both;
	}

	.week-column:nth-child(1) { animation-delay: 0.1s; }
	.week-column:nth-child(2) { animation-delay: 0.15s; }
	.week-column:nth-child(3) { animation-delay: 0.2s; }
	.week-column:nth-child(4) { animation-delay: 0.25s; }
	.week-column:nth-child(5) { animation-delay: 0.3s; }
	.week-column:nth-child(n+6) { animation-delay: 0.35s; }

	@keyframes slideIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>