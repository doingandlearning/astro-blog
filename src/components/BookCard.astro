---
import { Image } from "astro:assets";

export interface Props {
	title: string;
	author: string;
	genre: string;
	pages: number;
	dateFinished: string;
	coverUrl?: string;
	enhancedGenre?: string;
	isCurrentlyReading?: boolean;
}

const {
	title,
	author,
	genre,
	pages,
	dateFinished,
	coverUrl,
	enhancedGenre,
	isCurrentlyReading = false,
} = Astro.props;

// Format the date for display
const formattedDate = new Date(dateFinished).toLocaleDateString("en-US", {
	year: "numeric",
	month: "long",
	day: "numeric",
});

// Determine the display genre (use enhanced if available, fallback to original)
const displayGenre = enhancedGenre || genre;

// Create a fallback cover if none is provided
const hasCover = coverUrl && coverUrl.trim() !== "";

// Determine if the image is remote (external) or local
const isRemoteImage = hasCover && (coverUrl.startsWith('http://') || coverUrl.startsWith('https://'));
---

<div class="book-card" data-genre={displayGenre.toLowerCase()}>
	{
		isCurrentlyReading && (
			<div class="currently-reading-badge">
				<span>Currently Reading</span>
			</div>
		)
	}

	<div class="book-cover">
		{
			hasCover ? (
				isRemoteImage ? (
					// Use regular img tag for remote images to avoid server-side fetch issues
					<img
						src={coverUrl}
						alt={`Cover of ${title} by ${author}`}
						width={300}
						height={400}
						class="book-cover-image"
						loading="lazy"
						decoding="async"
					/>
				) : (
					// Use Astro's Image component for local images to get optimization
					<Image
						src={coverUrl}
						alt={`Cover of ${title} by ${author}`}
						width={300}
						height={400}
						class="book-cover-image"
						format="webp"
						quality={80}
						loading="lazy"
						decoding="async"
					/>
				)
			) : (
				<div class="book-cover-placeholder">
					<div class="placeholder-content">
						<span class="placeholder-title">
							{title.substring(0, 20)}
							{title.length > 20 ? "..." : ""}
						</span>
						<span class="placeholder-author">
							{author.substring(0, 15)}
							{author.length > 15 ? "..." : ""}
						</span>
					</div>
				</div>
			)
		}
	</div>

	<div class="book-info">
		<h3 class="book-title" title={title}>{title}</h3>
		<p class="book-author" title={author}>by {author}</p>

		<div class="book-metadata">
			<span class="book-genre" title={displayGenre}>{displayGenre}</span>
			<span class="book-pages">{pages} pages</span>
		</div>

		<p class="book-date">
			Finished {formattedDate}
		</p>
	</div>
</div>

<style>
	.book-card {
		background: white;
		border-radius: 12px;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		transition:
			transform 0.2s ease,
			box-shadow 0.2s ease;
		position: relative;
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	.book-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
	}

	.currently-reading-badge {
		position: absolute;
		top: 12px;
		right: 12px;
		background: var(--accent-light, #646cff);
		color: white;
		padding: 4px 8px;
		border-radius: 12px;
		font-size: 0.75rem;
		font-weight: 600;
		z-index: 2;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}

	.book-cover {
		height: 300px;
		overflow: hidden;
		position: relative;
		background: #f8f9fa;
	}

	.book-cover-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.book-card:hover .book-cover-image {
		transform: scale(1.05);
	}

	.book-cover-placeholder {
		width: 100%;
		height: 100%;
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		text-align: center;
		padding: 1rem;
	}

	.placeholder-content {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.placeholder-title {
		font-size: 1.1rem;
		font-weight: 600;
		line-height: 1.3;
	}

	.placeholder-author {
		font-size: 0.9rem;
		opacity: 0.9;
	}

	.book-info {
		padding: 1.5rem;
		flex: 1;
		display: flex;
		flex-direction: column;
	}

	.book-title {
		font-size: 1.3rem;
		margin: 0 0 0.5rem 0;
		color: #333;
		line-height: 1.3;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.book-author {
		font-size: 1.1rem;
		margin: 0 0 1rem 0;
		color: #666;
		font-style: italic;
		line-height: 1.3;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.book-metadata {
		display: flex;
		gap: 0.75rem;
		margin-bottom: 1rem;
		flex-wrap: wrap;
	}

	.book-genre {
		background: var(--accent-light, #646cff);
		color: white;
		padding: 0.25rem 0.75rem;
		border-radius: 12px;
		font-size: 0.8rem;
		font-weight: 500;
		white-space: nowrap;
	}

	.book-pages {
		background: #e9ecef;
		color: #495057;
		padding: 0.25rem 0.75rem;
		border-radius: 12px;
		font-size: 0.8rem;
		font-weight: 500;
		white-space: nowrap;
	}

	.book-date {
		margin: 0;
		color: #888;
		font-size: 0.9rem;
		margin-top: auto;
	}

	/* Responsive adjustments */
	@media (max-width: 768px) {
		.book-cover {
			height: 250px;
		}

		.book-info {
			padding: 1rem;
		}

		.book-title {
			font-size: 1.2rem;
		}

		.book-author {
			font-size: 1rem;
		}

		.book-metadata {
			gap: 0.5rem;
		}
	}

	@media (max-width: 480px) {
		.book-cover {
			height: 200px;
		}

		.book-info {
			padding: 0.75rem;
		}

		.book-title {
			font-size: 1.1rem;
		}

		.book-author {
			font-size: 0.9rem;
		}
	}
</style>
