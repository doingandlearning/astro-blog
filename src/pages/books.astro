---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import BookGrid from "../components/BookGrid.astro";
import Bookshelf from "../components/Bookshelf.astro";
import BookFilters from "../components/BookFilters.astro";
import EnhancedBookStats from "../components/EnhancedBookStatsWithThemes.astro";
import { calculateEnhancedBookStats } from "../utils/bookStats";
import type { BookWithEnhancedData } from "../types/books";
import "../styles/books.css";

// Get all books from the content collection
const books = await getCollection("books");

// Sort books by date finished (most recent first)
const sortedBooks = books.sort(
	(a, b) =>
		new Date(b.data.dateFinished).getTime() -
		new Date(a.data.dateFinished).getTime(),
);

// Convert collection entries to BookWithEnhancedData format
const booksData: BookWithEnhancedData[] = books.map((book) => ({
	title: book.data.title,
	author: book.data.author,
	dateFinished: new Date(book.data.dateFinished),
	genre: book.data.genre,
	pages: book.data.pages,
	coverUrl: book.data.coverUrl || "",
	readingYear: book.data.readingYear,
	readingMonth: book.data.readingMonth,
	isCurrentlyReading: book.data.isCurrentlyReading,
	enhancedGenre: book.data.enhancedGenre,
	bookCategory: book.data.bookCategory,
	readingLevel: book.data.readingLevel,
	themes: book.data.themes,
	targetAudience: book.data.targetAudience,
	complexity: book.data.complexity,
	readingTime: book.data.readingTime,
	relatedBooks: book.data.relatedBooks,
	keyInsights: book.data.keyInsights,
	tags: book.data.tags,
	llmProcessed: book.data.llmProcessed,
	llmProcessedAt: book.data.llmProcessedAt,
}));

// Calculate enhanced statistics
const enhancedStats = calculateEnhancedBookStats(booksData);

// Legacy stats for backward compatibility
const stats = {
	totalBooks: enhancedStats.totalBooks,
	totalPages: enhancedStats.totalPages,
	averagePagesPerBook: enhancedStats.averagePagesPerBook,
	booksThisYear: enhancedStats.booksThisYear,
	genreDistribution: books.reduce(
		(acc, book) => {
			const genre = book.data.genre;
			acc[genre] = (acc[genre] || 0) + 1;
			return acc;
		},
		{} as Record<string, number>,
	),
	readingTimeline: books.reduce(
		(acc, book) => {
			const year = book.data.readingYear;
			acc[year] = (acc[year] || 0) + 1;
			return acc;
		},
		{} as Record<number, number>,
	),
};

// Set page metadata
const pageTitle = "Books I've Read";
const pageDescription = `A collection of ${stats.totalBooks} books I've read, totaling ${stats.totalPages} pages.`;
---

<BaseLayout pageTitle={pageTitle} pageDescription={pageDescription}>
	<div class="container">
		<header class="page-header">
			<h1>{pageTitle}</h1>
			<p class="page-description">{pageDescription}</p>
		</header>

		<!-- Enhanced Reading Statistics -->
		<EnhancedBookStats stats={enhancedStats} books={booksData} />

		<!-- Structured Data for SEO -->
		<script
			is:inline
			type="application/ld+json"
			set:html={JSON.stringify({
				"@context": "https://schema.org",
				"@type": "CollectionPage",
				name: "Books I've Read",
				description: `A collection of ${enhancedStats.totalBooks} books I've read, totaling ${enhancedStats.totalPages} pages.`,
				url: "https://kevincunningham.co.uk/books",
				mainEntity: {
					"@type": "ItemList",
					numberOfItems: enhancedStats.totalBooks,
					itemListElement: booksData.slice(0, 10).map((book, index) => ({
						"@type": "ListItem",
						position: index + 1,
						item: {
							"@type": "Book",
							name: book.title,
							author: {
								"@type": "Person",
								name: book.author,
							},
							bookFormat: "https://schema.org/Paperback",
							numberOfPages: book.pages,
							genre: book.genre,
							datePublished: book.dateFinished,
							image: book.coverUrl || undefined,
						},
					})),
				},
				author: {
					"@type": "Person",
					name: "Kevin Cunningham",
					url: "https://kevincunningham.co.uk",
				},
			})}
		/>

		<!-- Book Filters -->
		<BookFilters books={books} />

		<!-- View Toggle -->
		<section class="view-toggle-section">
			<div class="view-toggle">
				<button id="grid-view-btn" class="view-btn active" onclick="switchToGridView()">
					<span class="view-icon">âŠž</span> Grid View
				</button>
				<button id="shelf-view-btn" class="view-btn" onclick="switchToShelfView()">
					<span class="view-icon">ðŸ“š</span> Shelf View
				</button>
			</div>
		</section>

		<!-- Books Display -->
		<section class="books-section">
			<h2>All Books ({books.length})</h2>
			
			<!-- Grid View -->
			<div id="grid-view" class="books-view active">
				<BookGrid
					books={sortedBooks}
					showFilters={true}
					totalCount={books.length}
				/>
			</div>
			
			<!-- Shelf View -->
			<div id="shelf-view" class="books-view">
				<Bookshelf books={sortedBooks} />
			</div>
		</section>
	</div>

	<script is:inline define:vars={{ sortedBooks }}>
		// Make book data available globally for filters
		window.bookData = sortedBooks;
		window.filteredBooks = sortedBooks;

		// View switching functions
		function switchToGridView() {
			document.getElementById('grid-view').classList.add('active');
			document.getElementById('shelf-view').classList.remove('active');
			document.getElementById('grid-view-btn').classList.add('active');
			document.getElementById('shelf-view-btn').classList.remove('active');
			localStorage.setItem('booksViewPreference', 'grid');
		}

		function switchToShelfView() {
			document.getElementById('grid-view').classList.remove('active');
			document.getElementById('shelf-view').classList.add('active');
			document.getElementById('grid-view-btn').classList.remove('active');
			document.getElementById('shelf-view-btn').classList.add('active');
			localStorage.setItem('booksViewPreference', 'shelf');
		}

		// Restore user's view preference
		document.addEventListener('DOMContentLoaded', () => {
			const preference = localStorage.getItem('booksViewPreference');
			if (preference === 'shelf') {
				switchToShelfView();
			}
		});

		// Make functions globally available
		window.switchToGridView = switchToGridView;
		window.switchToShelfView = switchToShelfView;

		// Listen for filter changes and update the grid
		window.addEventListener("booksFiltered", (event) => {
			const { filteredBooks } = event.detail;

			// Update the books grid
			const bookGrid = document.querySelector(".book-grid");
			if (bookGrid && filteredBooks) {
				// Clear existing books
				bookGrid.innerHTML = "";

				// Add filtered books
				filteredBooks.forEach((book) => {
					const bookCard = createBookCard(book);
					bookGrid.appendChild(bookCard);
				});

				// Update the books count
				const booksCountElement = document.querySelector(".books-section h2");
				if (booksCountElement) {
					booksCountElement.textContent = `All Books (${filteredBooks.length})`;
				}

				// Show/hide no books message
				const noBooksElement = document.querySelector(".no-books");
				if (noBooksElement) {
					noBooksElement.style.display =
						filteredBooks.length === 0 ? "block" : "none";
				}
			}
		});

		function createBookCard(book) {
			const card = document.createElement("div");
			card.className = "book-card";
			card.setAttribute(
				"data-genre",
				(book.data.enhancedGenre || book.data.genre).toLowerCase(),
			);

			const effectiveCoverPath = book.data.localCoverPath || book.data.coverUrl;
			const coverHtml = effectiveCoverPath
				? `<img src="${effectiveCoverPath}" alt="Cover of ${book.data.title} by ${book.data.author}" loading="lazy" />`
				: `<div class="book-cover-placeholder"><span>${book.data.title.substring(0, 20)}${book.data.title.length > 20 ? "..." : ""}</span></div>`;

			card.innerHTML = `
				${book.data.isCurrentlyReading ? '<div class="currently-reading-badge"><span>Currently Reading</span></div>' : ""}
				<div class="book-cover">
					${coverHtml}
				</div>
				<div class="book-info">
					<h3 class="book-title" title="${book.data.title}">${book.data.title}</h3>
					<p class="book-author" title="${book.data.author}">by ${book.data.author}</p>
					<div class="book-metadata">
						<span class="book-genre" title="${book.data.enhancedGenre || book.data.genre}">${book.data.enhancedGenre || book.data.genre}</span>
						<span class="book-pages">${book.data.pages} pages</span>
					</div>
					<p class="book-date">
						Finished ${new Date(book.data.dateFinished).toLocaleDateString("en-US", {
							year: "numeric",
							month: "long",
							day: "numeric",
						})}
					</p>
				</div>
			`;

			return card;
		}
	</script>
</BaseLayout>

<style>
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem;
	}

	.page-header {
		text-align: center;
		margin-bottom: 3rem;
	}

	.page-header h1 {
		font-size: 2.5rem;
		margin-bottom: 1rem;
		color: var(--accent-light, #646cff);
	}

	.page-description {
		font-size: 1.2rem;
		color: #666;
	}

	.processing-errors,
	.processing-warnings {
		margin-bottom: 2rem;
		padding: 1rem;
		border-radius: 8px;
	}

	.processing-errors {
		background-color: #fee;
		border: 1px solid #fcc;
		color: #c33;
	}

	.processing-warnings {
		background-color: #fef;
		border: 1px solid #ccf;
		color: #33c;
	}

	.reading-stats {
		margin-bottom: 3rem;
	}

	.reading-stats h2 {
		text-align: center;
		margin-bottom: 2rem;
		font-size: 2rem;
	}

	.stats-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1.5rem;
	}

	.stat-card {
		text-align: center;
		padding: 1.5rem;
		background: #f8f9fa;
		border-radius: 12px;
		border: 1px solid #e9ecef;
	}

	.stat-number {
		font-size: 2rem;
		font-weight: bold;
		color: var(--accent-light, #646cff);
		margin: 0;
	}

	.genre-distribution {
		margin-bottom: 3rem;
	}

	.genre-distribution h2 {
		text-align: center;
		margin-bottom: 2rem;
		font-size: 2rem;
	}

	.genre-list {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 1rem;
	}

	.genre-item {
		display: flex;
		justify-content: space-between;
		padding: 0.75rem;
		background: #f8f9fa;
		border-radius: 8px;
		border: 1px solid #e9ecef;
	}

	.genre-count {
		font-weight: bold;
		color: var(--accent-light, #646cff);
	}

	.books-section {
		margin-bottom: 3rem;
	}

	.books-section h2 {
		text-align: center;
		margin-bottom: 2rem;
		font-size: 2rem;
	}

	.view-toggle-section {
		margin-bottom: 2rem;
		display: flex;
		justify-content: center;
	}

	.view-toggle {
		display: flex;
		background: #f8f9fa;
		border-radius: 8px;
		border: 1px solid #e9ecef;
		overflow: hidden;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.view-btn {
		background: transparent;
		border: none;
		padding: 0.75rem 1.5rem;
		cursor: pointer;
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 0.95rem;
		font-weight: 500;
		color: #666;
		transition: all 0.2s ease;
		border-right: 1px solid #e9ecef;
	}

	.view-btn:last-child {
		border-right: none;
	}

	.view-btn:hover {
		background: #e9ecef;
		color: #333;
	}

	.view-btn.active {
		background: var(--accent-light, #646cff);
		color: white;
	}

	.view-icon {
		font-size: 1.1rem;
	}

	.books-view {
		display: none;
	}

	.books-view.active {
		display: block;
	}

	@media (max-width: 768px) {
		.container {
			padding: 1rem;
		}

		.page-header h1 {
			font-size: 2rem;
		}

		.stats-grid {
			grid-template-columns: repeat(2, 1fr);
		}
	}
</style>
